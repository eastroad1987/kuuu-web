// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  user
  admin
}

enum YnEnum {
  Y
  N
}

model User {
  id              BigInt        @id @default(autoincrement())
  email           String        @unique
  name            String
  password        String
  role            RoleEnum      @default(user)
  accessToken     String?       @map("access_token")
  refreshToken    String?       @map("refresh_token")
  deviceToken     String?       @map("device_token")
  imageUrl        String?       @map("image_url")
  snsId           String?       @map("sns_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  posts           Post[]
  comments        Comment[]

  @@map("users")
}

model Category {
  id            BigInt        @id @default(autoincrement())
  title         String        @unique
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")
  posts         Post[]
  subCategories SubCategory[]

  @@map("categories")
}

model SubCategory {
  id              BigInt        @id @default(autoincrement())
  title           String
  anonymousYn     YnEnum        @default(N) @map("anonymous_yn")
  titleYn         YnEnum        @default(Y) @map("title_yn")
  contentYn       YnEnum        @default(Y) @map("content_yn")
  thumbnailYn     YnEnum        @default(N) @map("thumbnail_yn")
  referencePlaceYn YnEnum       @default(N) @map("reference_place_yn")
  secretYn        YnEnum        @default(N) @map("secret_yn")
  imagesYn        YnEnum        @default(Y) @map("images_yn")
  attachFilesYn   YnEnum        @default(N) @map("attach_files_yn")
  commentYn       YnEnum        @default(N) @map("comment_yn")
  viewCntYn       YnEnum        @default(Y) @map("view_cnt_yn")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  categoryId      BigInt        @map("category_id")
  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  posts           Post[]

  @@map("sub_categories")
}

model Post {
  id              BigInt        @id @default(autoincrement())
  summary         String
  title           String
  content         String
  thumbnail       String?
  referencePlace  String?       @map("reference_place")
  images          String?
  attachFiles     String?       @map("attach_files")
  viewCnt         Int           @default(0) @map("view_cnt")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  publishedAt     DateTime?     @map("published_at")
  authorId        BigInt        @map("author_id")
  author          User          @relation(fields: [authorId], references: [id])
  subcategoryId   BigInt?       @map("subcategory_id")
  subcategory     SubCategory?  @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)
  categoryId      BigInt        @map("category_id")
  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  comments        Comment[]
  uploadFiles     UploadFile[]

  @@map("posts")
}

model Comment {
  id              BigInt        @id @default(autoincrement())
  content         String
  writeName       String        @map("write_name")
  filePath        String?       @map("file_path")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  postId          BigInt        @map("post_id")
  post            Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId        BigInt        @map("author_id")
  author          User          @relation(fields: [authorId], references: [id])
  parentCommentId BigInt?       @map("parent_comment_id")
  parentComment   Comment?      @relation("CommentToComment", fields: [parentCommentId], references: [id], onDelete: Cascade)
  childComments   Comment[]     @relation("CommentToComment")

  @@map("comments")
}

model UploadFile {
  id              BigInt        @id @default(autoincrement())
  name            String?
  originalName    String?       @map("original_name")
  encoding        String?
  mimeType        String?       @map("mime_type")
  size            Decimal       @db.Decimal(10,2)
  url             String?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  postId          BigInt?       @map("post_id")
  post            Post?         @relation(fields: [postId], references: [id])

  @@map("upload_files")
} 